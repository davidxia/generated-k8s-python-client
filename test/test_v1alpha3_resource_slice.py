# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: master
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.v1alpha3_resource_slice import V1alpha3ResourceSlice  # noqa: E501
from kubernetes.client.rest import ApiException

class TestV1alpha3ResourceSlice(unittest.TestCase):
    """V1alpha3ResourceSlice unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1alpha3ResourceSlice
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.v1alpha3_resource_slice.V1alpha3ResourceSlice()  # noqa: E501
        if include_optional :
            return V1alpha3ResourceSlice(
                api_version = '0', 
                kind = '0', 
                metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : '0'
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        '0'
                        ], 
                    generate_name = '0', 
                    generation = 56, 
                    labels = {
                        'key' : '0'
                        }, 
                    managed_fields = [
                        kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '0', 
                            fields_type = '0', 
                            fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                            manager = '0', 
                            operation = '0', 
                            subresource = '0', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '0', 
                    namespace = '0', 
                    owner_references = [
                        kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '0', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '0', 
                            name = '0', 
                            uid = '0', )
                        ], 
                    resource_version = '0', 
                    self_link = '0', 
                    uid = '0', ), 
                spec = kubernetes.client.models.v1alpha3/resource_slice_spec.v1alpha3.ResourceSliceSpec(
                    all_nodes = True, 
                    devices = [
                        kubernetes.client.models.v1alpha3/device.v1alpha3.Device(
                            basic = kubernetes.client.models.v1alpha3/basic_device.v1alpha3.BasicDevice(
                                attributes = {
                                    'key' : kubernetes.client.models.v1alpha3/device_attribute.v1alpha3.DeviceAttribute(
                                        bool = True, 
                                        int = 56, 
                                        string = '0', 
                                        version = '0', )
                                    }, 
                                capacity = {
                                    'key' : '0'
                                    }, ), 
                            name = '0', )
                        ], 
                    driver = '0', 
                    node_name = '0', 
                    node_selector = kubernetes.client.models.v1/node_selector.v1.NodeSelector(
                        node_selector_terms = [
                            kubernetes.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                                match_expressions = [
                                    kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                        key = '0', 
                                        operator = '0', 
                                        values = [
                                            '0'
                                            ], )
                                    ], 
                                match_fields = [
                                    kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                        key = '0', 
                                        operator = '0', )
                                    ], )
                            ], ), 
                    pool = kubernetes.client.models.v1alpha3/resource_pool.v1alpha3.ResourcePool(
                        generation = 56, 
                        name = '0', 
                        resource_slice_count = 56, ), )
            )
        else :
            return V1alpha3ResourceSlice(
                spec = kubernetes.client.models.v1alpha3/resource_slice_spec.v1alpha3.ResourceSliceSpec(
                    all_nodes = True, 
                    devices = [
                        kubernetes.client.models.v1alpha3/device.v1alpha3.Device(
                            basic = kubernetes.client.models.v1alpha3/basic_device.v1alpha3.BasicDevice(
                                attributes = {
                                    'key' : kubernetes.client.models.v1alpha3/device_attribute.v1alpha3.DeviceAttribute(
                                        bool = True, 
                                        int = 56, 
                                        string = '0', 
                                        version = '0', )
                                    }, 
                                capacity = {
                                    'key' : '0'
                                    }, ), 
                            name = '0', )
                        ], 
                    driver = '0', 
                    node_name = '0', 
                    node_selector = kubernetes.client.models.v1/node_selector.v1.NodeSelector(
                        node_selector_terms = [
                            kubernetes.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                                match_expressions = [
                                    kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                        key = '0', 
                                        operator = '0', 
                                        values = [
                                            '0'
                                            ], )
                                    ], 
                                match_fields = [
                                    kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                        key = '0', 
                                        operator = '0', )
                                    ], )
                            ], ), 
                    pool = kubernetes.client.models.v1alpha3/resource_pool.v1alpha3.ResourcePool(
                        generation = 56, 
                        name = '0', 
                        resource_slice_count = 56, ), ),
        )

    def testV1alpha3ResourceSlice(self):
        """Test V1alpha3ResourceSlice"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: master
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.v1alpha3_device_class_spec import V1alpha3DeviceClassSpec  # noqa: E501
from kubernetes.client.rest import ApiException

class TestV1alpha3DeviceClassSpec(unittest.TestCase):
    """V1alpha3DeviceClassSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1alpha3DeviceClassSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.v1alpha3_device_class_spec.V1alpha3DeviceClassSpec()  # noqa: E501
        if include_optional :
            return V1alpha3DeviceClassSpec(
                config = [
                    kubernetes.client.models.v1alpha3/device_class_configuration.v1alpha3.DeviceClassConfiguration(
                        opaque = kubernetes.client.models.v1alpha3/opaque_device_configuration.v1alpha3.OpaqueDeviceConfiguration(
                            driver = '0', 
                            parameters = kubernetes.client.models.parameters.parameters(), ), )
                    ], 
                selectors = [
                    kubernetes.client.models.v1alpha3/device_selector.v1alpha3.DeviceSelector(
                        cel = kubernetes.client.models.v1alpha3/cel_device_selector.v1alpha3.CELDeviceSelector(
                            expression = '0', ), )
                    ], 
                suitable_nodes = kubernetes.client.models.v1/node_selector.v1.NodeSelector(
                    node_selector_terms = [
                        kubernetes.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                            match_expressions = [
                                kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                    key = '0', 
                                    operator = '0', 
                                    values = [
                                        '0'
                                        ], )
                                ], 
                            match_fields = [
                                kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                    key = '0', 
                                    operator = '0', )
                                ], )
                        ], )
            )
        else :
            return V1alpha3DeviceClassSpec(
        )

    def testV1alpha3DeviceClassSpec(self):
        """Test V1alpha3DeviceClassSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()

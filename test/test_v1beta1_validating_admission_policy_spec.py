# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: master
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.v1beta1_validating_admission_policy_spec import V1beta1ValidatingAdmissionPolicySpec  # noqa: E501
from kubernetes.client.rest import ApiException

class TestV1beta1ValidatingAdmissionPolicySpec(unittest.TestCase):
    """V1beta1ValidatingAdmissionPolicySpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1beta1ValidatingAdmissionPolicySpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.v1beta1_validating_admission_policy_spec.V1beta1ValidatingAdmissionPolicySpec()  # noqa: E501
        if include_optional :
            return V1beta1ValidatingAdmissionPolicySpec(
                audit_annotations = [
                    kubernetes.client.models.v1beta1/audit_annotation.v1beta1.AuditAnnotation(
                        key = '0', 
                        value_expression = '0', )
                    ], 
                failure_policy = '0', 
                match_conditions = [
                    kubernetes.client.models.v1beta1/match_condition.v1beta1.MatchCondition(
                        expression = '0', 
                        name = '0', )
                    ], 
                match_constraints = kubernetes.client.models.v1beta1/match_resources.v1beta1.MatchResources(
                    exclude_resource_rules = [
                        kubernetes.client.models.v1beta1/named_rule_with_operations.v1beta1.NamedRuleWithOperations(
                            api_groups = [
                                '0'
                                ], 
                            api_versions = [
                                '0'
                                ], 
                            operations = [
                                '0'
                                ], 
                            resource_names = [
                                '0'
                                ], 
                            resources = [
                                '0'
                                ], 
                            scope = '0', )
                        ], 
                    match_policy = '0', 
                    namespace_selector = kubernetes.client.models.v1/label_selector.v1.LabelSelector(
                        match_expressions = [
                            kubernetes.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                key = '0', 
                                operator = '0', 
                                values = [
                                    '0'
                                    ], )
                            ], 
                        match_labels = {
                            'key' : '0'
                            }, ), 
                    object_selector = kubernetes.client.models.v1/label_selector.v1.LabelSelector(), 
                    resource_rules = [
                        kubernetes.client.models.v1beta1/named_rule_with_operations.v1beta1.NamedRuleWithOperations(
                            scope = '0', )
                        ], ), 
                param_kind = kubernetes.client.models.v1beta1/param_kind.v1beta1.ParamKind(
                    api_version = '0', 
                    kind = '0', ), 
                validations = [
                    kubernetes.client.models.v1beta1/validation.v1beta1.Validation(
                        expression = '0', 
                        message = '0', 
                        message_expression = '0', 
                        reason = '0', )
                    ], 
                variables = [
                    kubernetes.client.models.v1beta1/variable.v1beta1.Variable(
                        expression = '0', 
                        name = '0', )
                    ]
            )
        else :
            return V1beta1ValidatingAdmissionPolicySpec(
        )

    def testV1beta1ValidatingAdmissionPolicySpec(self):
        """Test V1beta1ValidatingAdmissionPolicySpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
